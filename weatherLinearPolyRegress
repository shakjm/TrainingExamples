#File has been written by Kelvin Shak
#With reference to UDEMY course on Data Science & Machine Learning

import matplotlib.pyplot as plt
import numpy as np
import pandas as pd
import sklearn.preprocessing as skl
import os

#Changing Directory to csv file and reading CSV file
#
#
os.chdir('/home/shak/Documents/DataScience/Examples')
cfile = pd.read_csv('weatherHistory.csv')
colfile = ['Temperature (C)','Humidity']
cfile_TH = cfile[colfile]

#Process file based on Temperature and Humidity
#Plot of scatter of the data to show a rough plot of datasets
#
temp_data = cfile_TH['Temperature (C)']
humid_data = cfile_TH['Humidity']

plt.figure()
plt.show()
plt.title('Graph of Humidity against Temperature')
plt.ylabel('Temperature')
plt.xlabel('Humidity')
plt.scatter(humid_data,temp_data)

#Linear Regression Tool

from scipy import stats
slope,intercept,r,p,stderr = stats.linregress(humid_data,temp_data)

#Finding a line that fits the data
# y = mx + c
#
def line(x) : 
    return slope*x + intercept

straightline = line(humid_data)
plt.plot(humid_data,straightline,'r--')

#Printing R square value
rsquare = r**2
print('Value of r square is : ', rsquare)

#Relationship between Humidity and Apparent Temperature
col2 = ['Humidity','Apparent Temperature (C)']
data2 = cfile[col2]
humid_data2 = cfile['Humidity']
app_data2 = cfile['Apparent Temperature (C)']

plt.figure()
plt.show()
plt.title('Linear Regression for Humidity Against Apparent Temperature')
plt.xlabel('Humidity')
plt.ylabel('Apparent Temperature')
plt.scatter(humid_data2,app_data2)

slope2,intercept2,r2,p2,stderr2 = stats.linregress(humid_data2,app_data2)

def line2(x):
    return slope2*x + intercept2

straightline2 = line2(humid_data2)
plt.plot(humid_data2,straightline2,'b-')

rsquare2 = r2**2
print('Value of R square for Humidity against Apparent Temperature is : ', rsquare2)

#############################################################
#Training and Test                                          #
#############################################################
sizedata = np.size(humid_data)
traindata = int(np.round(0.8*(sizedata)))

humid_data_train = humid_data[:traindata]
humid_data_test = humid_data[traindata:]
temp_data_train = temp_data[:traindata]
temp_data_test = temp_data[traindata:]


# Creating an array for training data sets
# Polynomial function used to train the predictor to understand the values
# 
plt.figure()
plt.show()
plt.title('Machine training sets')
plt.scatter(humid_data_train,temp_data_train)
x = np.array(humid_data_train)
y = np.array(temp_data_train)
p4 = np.poly1d(np.polyfit(x,y,8))
xp = np.linspace(0,1.0,100)

#Know the maximum and minimum value of the x-axis to know what range of polynomial to plot
# Testing the machine training plot also done with p4 using test data sets
# Same polynomial equation, different sets of data for x value
plt.plot(xp,p4(xp),'r-')

testx = np.array(humid_data_test)
testy = np.array(temp_data_test)

plt.figure()
plt.show()
plt.title('Machine Testing sets')
plt.scatter(humid_data_test,temp_data_test)
plt.plot(xp,p4(xp),'r-')

from sklearn.metrics import r2_score
#p4 is y = x^2 + x + c where p4 = y
#r2_score(y_true,y_pred)
rscore = r2_score(y,p4(x))
print('Value of r squared for polynomial of machine training set is :',rscore)
rscore2 = r2_score(testy,p4(testx))
print('Value of r squared for polynomial of machine testing set is :',rscore2)
